<Project>

  <PropertyGroup>
    <!-- TODO: Dynamically generate Title if one wasn't set -->
    <Title Condition="'$(Title)' == ''">$(Product) Asset</Title>
  </PropertyGroup>

  <PropertyGroup>
    <CommonTags Condition="$(IsCoreProject)">$(CommonTags);.NET</CommonTags>
    <PackageTags Condition="'$(PackageTags)' != ''">$(CommonTags);$(PackageTags)</PackageTags>
    <PackageTags Condition="'$(PackageTags)' == ''">$(CommonTags)</PackageTags>
  </PropertyGroup>

  <ItemGroup Condition="$(IsPackable)">
    <None Include="$(BuildToolsDirectory)nuget.png" Pack="true" PackagePath="\Icon.png" Visible="False" />
    <None Include="$(RepositoryDirectory)ThirdPartyNotices.txt" Pack="true" PackagePath="\" Visible="False" />
    <None Include="$(RepositoryDirectory)LICENSE.md" Pack="true" PackagePath="\LICENSE.md" Visible="False" />
    <None Include="$(RepositoryDirectory)README.md" Pack="true" PackagePath="\README.md" Visible="False" />
  </ItemGroup>

  <Target Name="AddCommitHashToAssemblyAttributes" BeforeTargets="GetAssemblyAttributes">
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition="'$(SourceRevisionId)' != ''">
        <_Parameter1>CommitHash</_Parameter1>
        <_Parameter2>$(SourceRevisionId)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!-- Define NETSTANDARD2_1_OR_GREATER for .NET Standard 2.1 targets and above -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net6.0' OR '$(TargetFramework)' == 'net6.0' OR '$(TargetFramework)' == 'net8.0'">
    <DefineConstants>NETSTANDARD2_1_OR_GREATER</DefineConstants>
  </PropertyGroup>

  <!-- Configure trimming for projects on .NET 6 and above -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net6.0' OR '$(TargetFramework)' == 'net8.0'">
    <IsTrimmable>true</IsTrimmable>
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
  </PropertyGroup>

  <!--
    The following target has been ported from TerraFX.Interop.Windows.
    See: https://github.com/terrafx/terrafx.interop.windows.
    Using [module: SkipLocalsInit] suppresses the .init flag for local variables for the entire module.
    This doesn't affect the correctness of methods in this assembly, as none of them are relying on the
    JIT ensuring that all local memory is zeroed out to work. Doing this can provide some minor
    performance benefits, depending on the workload.
  -->
  <PropertyGroup>
    <GeneratedSkipLocalsInitFile Condition="'$(GeneratedSkipLocalsInitFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).SkipLocalsInit.g.cs</GeneratedSkipLocalsInitFile>
    <GeneratedSkipLocalsInitFileLines>
      <![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[module: global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]]]>
    </GeneratedSkipLocalsInitFileLines>
  </PropertyGroup>

  <Target Name="GenerateSkipLocalsInit"
          BeforeTargets="BeforeCompile;CoreCompile"
          DependsOnTargets="PrepareForBuild"
          Condition="'$(Language)' == 'C#'"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(GeneratedSkipLocalsInitFile)">

    <!-- Write the file with the attribute -->
    <WriteLinesToFile Lines="$(GeneratedSkipLocalsInitFileLines)" Overwrite="true" WriteOnlyWhenDifferent="true" File="$(GeneratedSkipLocalsInitFile)" />

    <!-- Include the generated file in the list of files to compile -->
    <ItemGroup>
      <Compile Include="$(GeneratedSkipLocalsInitFile)" />
    </ItemGroup>
  </Target>
</Project>
